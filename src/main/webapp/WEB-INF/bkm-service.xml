<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	 <!-- 静态资源访问
	<mvc:resources location="/" mapping="/**" /> -->
	<mvc:default-servlet-handler />
	<mvc:annotation-driven />		<!-- 必须添加mvc:annotation-driven 否则所有controller失效 -->
	
	<!-- jsp渲染 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	    <property name="prefix" value="/WEB-INF/"/>
	    <property name="suffix" value=".jsp"/>
	</bean>

	<!-- 使用jackson处理json请求 spring4-->
	<bean id="stringConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
    	<property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringConverter" />
                <ref bean="jsonConverter" />
            </list>
        </property>
    </bean>
    
	<!-- Annotation-based configuration 
 	<context:annotation-config /> -->
 	
 	<!-- 自动扫描注解的类是控制器或服务-->
    <context:component-scan base-package="com.controller" />
    <context:component-scan base-package="com.service" />
    
	<!-- 自动扫描注解的类是控制器或服务 过滤的写法
	<context:component-scan base-package="com" use-default-filters="false">
		<context:include-filter type="regex" expression="com.controller.*" />
		<context:include-filter type="regex" expression="com.service.impl.*" />
		<context:include-filter type="regex" expression="com.logging.*" />
	</context:component-scan>
	-->

	<!-- spring定时调度，开启这个配置，spring才能识别@Scheduled注解    -->
	<task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
	<task:scheduler id="qbScheduler" pool-size="10"/>
    
    <aop:aspectj-autoproxy />
     
	<!-- Make all @Transactional beans -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- TransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 声明式事务配置，默认都使用注解实现，因此注释这段配置
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="allManagerMethod" expression="execution(* com.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
	</aop:config>
	-->
	
	<context:property-placeholder location="classpath:conf.properties" />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
	  	<property name="username" value="${jusername}"/>
	  	<property name="password" value="${jpassword}"/>
		<property name="initialSize" value="5" />				<!--initialSize: 初始化连接 -->
		<property name="maxIdle" value="10" />					<!--maxIdle: 最大空闲连接 -->
		<property name="minIdle" value="5" />					<!--minIdle: 最小空闲连接 -->
		<property name="maxActive" value="15" />				<!--maxActive: 最大连接数量 -->	
		<property name="removeAbandoned" value="true" />		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandonedTimeout" value="180" />	<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="maxWait" value="3000" />				<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
		<property name="validationQuery">
			<value>SELECT 1 FROM DUAL</value>
		</property>
		<property name="testOnBorrow">
			<value>true</value>
		</property>
	</bean>
	
	<!-- 初始化数据表结构-->
	<jdbc:initialize-database data-source="dataSource" enabled="true">
		<jdbc:script location="classpath:oracle.sql" encoding="utf-8"/>
		<jdbc:script location="classpath:import-data.sql" encoding="utf-8"/>
	</jdbc:initialize-database>
	
	<bean id="h2Server" class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start" destroy-method="stop" depends-on="h2WebServer">
		<constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,9092"/>
	</bean>

	<bean id="h2WebServer" class="org.h2.tools.Server" factory-method="createWebServer" init-method="start" destroy-method="stop">
		<constructor-arg value="-web,-webAllowOthers,-webPort,8082"/>
	</bean> 
 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  		<property name="configLocation" value="/WEB-INF/SqlMapConfig.xml" />
  		<property name="mapperLocations" value="classpath:com/model/**/*.xml" />
  		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置SQLSession模板 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
</beans>